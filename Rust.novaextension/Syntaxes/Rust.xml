<?xml version="1.0" encoding="UTF-8"?>
<syntax name="rust">
  <meta>
    <name>Rust</name>
    <type>compiled</type>
    <preferred-file-extension>rs</preferred-file-extension>
  </meta>
  
  <detectors>
    <extension priority="1.0">rs</extension>
  </detectors>
  
  <indentation>
    <increase>
      <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
    </increase>
    <decrease>
      <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
    </decrease>
  </indentation>
  
  <comments>
    <single>
      <expression>//</expression>
    </single>
    <multiline>
      <starts-with>
        <expression>/*</expression>
      </starts-with>
      <ends-with>
        <expression>*/</expression>
      </ends-with>
    </multiline>
  </comments>
  
  <brackets>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
    <pair open="&lt;" close="&gt;" />
  </brackets>
  
  <surrounding-pairs>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
    <pair open="&lt;" close="&gt;" />
    <pair open="&quot;" close="&quot;" />
    <pair open="r#&quot;" close="&quot;#" />
  </surrounding-pairs>
  
  <scopes>
    <include syntax="self" collection="attributes" />
    <include syntax="self" collection="blocks" />
    <include syntax="self" collection="comments" />
    <include syntax="self" collection="definitions" />
    <include syntax="self" collection="identifiers" />
    <include syntax="self" collection="imports" />
    <include syntax="self" collection="keywords" />
    <include syntax="self" collection="syntax" />
    <include syntax="self" collection="values" />
  </scopes>
  
  <collections>
    <!-- !Arguments -->
    <collection name="arguments">
      <scope name="rust.arguments">
        <starts-with>
          <expression>\(</expression>
          <capture number="0" name="rust.bracket" />
        </starts-with>
        <ends-with>
          <expression>\)</expression>
          <capture number="0" name="rust.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="argument-items" />
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Argument Items -->
    <collection name="argument-items">
      <scope name="rust.separator.comma">
        <expression>,</expression>
      </scope>
      <scope name="rust.argument.self">
        <symbol type="argument" />
        <expression>(&amp;)?(?:(mut)\s+)?\b(self)\b</expression>
        <capture number="1" name="rust.operator.pointer" />
        <capture number="2" name="rust.keyword.modifier" />
        <capture number="3" name="rust.keyword.self" />
      </scope>
      <scope name="rust.argument">
        <symbol type="argument" />
        <starts-with>
          <expression>(&amp;)?(?:(mut)\s+)?\b([a-zA-Z_][A-Za-z0-9_]*)\b</expression>
          <capture number="1" name="rust.operator.pointer" />
          <capture number="2" name="rust.keyword.modifier" />
          <capture number="3" name="rust.identifier.argument.name" />
        </starts-with>
        <ends-with>
          <expression>(?=\)|,)</expression>
        </ends-with>
        <subscopes>
          <scope name="rust.argument.type">
            <starts-with>
              <expression>:</expression>
            </starts-with>
            <ends-with>
              <expression>(?=\)|,)</expression>
            </ends-with>
            <subscopes>
              <include syntax="self" collection="generics" />
              <include syntax="self" collection="qualified-types" />
              <include syntax="self" collection="types" />
            </subscopes>
          </scope>
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Attributes -->
    <collection name="attributes">
      <scope name="rust.processing.attribute">
        <starts-with>
          <expression>\#\!?\[</expression>
        </starts-with>
        <ends-with>
          <expression>\]</expression>
        </ends-with>
      </scope>
    </collection>
    
    <!-- !Blocks -->
    <collection name="blocks">
      <scope name="rust.block">
        <symbol type="block">
          <context behavior="subtree" />
        </symbol>
        <starts-with>
          <expression>\{</expression>
          <capture number="0" name="rust.block.bracket" />
        </starts-with>
        <ends-with>
          <expression>\}</expression>
          <capture number="0" name="rust.block.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" />
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Comments -->
    <collection name="comments">
      <scope name="rust.comment.single">
        <expression>//(?:$|([^/!].*)$)</expression>
        <capture number="1" name="rust.comment.single.content" />
      </scope>
      <scope name="rust.comment.multiline">
        <symbol type="comment">
          <context behavior="subtree" />
        </symbol>
        <starts-with>
          <expression>/\*</expression>
        </starts-with>
        <ends-with>
          <expression>\*/</expression>
        </ends-with>
      </scope>
      <scope name="rust.string.docstring">
        <expression>//[/!](.*)$</expression>
        <capture number="1" name="rust.string.docstring.content" />
      </scope>
    </collection>
    
    <!-- !Definitions -->
    <collection name="definitions">
      <!-- !Computed Constant -->
      <scope name="rust.definition.constant.static">
        <symbol type="constant" scope="global" />
        <starts-with>
          <expression>\b(static|const)\s+([a-zA-Z_][a-zA-Z0-9_]*)(:)?\s*</expression>
          <capture number="1" name="rust.keyword.modifier.construct.variable" />
          <capture number="2" name="rust.identifier.constant.name" />
          <capture number="3" name="rust.operator" />
        </starts-with>
        <ends-with>
          <expression>(\=)(?!\=)|(\;)</expression>
          <capture number="1" name="rust.operator" />
          <capture number="2" name="rust.semicolon" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="generics" />
          <include syntax="self" collection="qualified-types" />
          <include syntax="self" collection="types" />
          <cut-off>
                <expression>(?=let|const|static|\{|\})</expression>
          </cut-off>
        </subscopes>
      </scope>
      <!-- !Constant -->
      <scope name="rust.definition.immutable"> <!-- .identifier omitted to prevent bug -->
        <symbol type="variable" scope="global" />
        <starts-with>
          <expression>\b(let)\s+(?!mut\s)([a-zA-Z_][a-zA-Z0-9_]*)(:)?\s*</expression>
          <capture number="1" name="rust.keyword.construct.variable" />
          <capture number="2" name="rust.identifier.name" />
          <capture number="3" name="rust.operator" />
        </starts-with>
        <ends-with>
          <expression>(\=)(?!\=)|(\;)</expression>
          <capture number="1" name="rust.operator" />
          <capture number="2" name="rust.semicolon" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="generics" />
          <include syntax="self" collection="qualified-types" />
          <include syntax="self" collection="types" />
          <cut-off>
                  <expression>(?=let|const|static|\{|\})</expression>
          </cut-off>
        </subscopes>
      </scope>
      <!-- !Variable -->
      <scope name="rust.definition.mutable"> <!-- .identifier omitted to prevent bug -->
        <symbol type="variable" scope="global" />
        <starts-with>
          <expression>\b(let)\s+(mut)\s+([a-zA-Z_][a-zA-Z0-9_]*)(:)?\s*</expression>
          <capture number="1" name="rust.keyword.construct.variable" />
          <capture number="2" name="rust.keyword.modifier" />
          <capture number="3" name="rust.identifier.name" />
          <capture number="4" name="rust.operator" />
        </starts-with>
        <ends-with>
          <expression>(\=)(?!\=)|(\;)</expression>
          <capture number="1" name="rust.operator" />
          <capture number="2" name="rust.semicolon" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="generics" />
          <include syntax="self" collection="qualified-types" />
          <include syntax="self" collection="types" />
          <cut-off>
                  <expression>(let|const|static|\{|\})</expression>
          </cut-off>
        </subscopes>
      </scope>
      <!-- !Struct -->
      <scope name="rust.definition.struct">
        <symbol type="struct">
          <context behavior="subtree" />
        </symbol>
        <starts-with>
          <expression>\b(pub)?\s*(struct)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*</expression>
          <capture number="1" name="rust.keyword.modifier.visibility" />
          <capture number="2" name="rust.keyword.construct.struct" />
          <capture number="3" name="rust.identifier.type.struct.name" />
        </starts-with>
        <ends-with />
        <subscopes anchored="true">
          <include syntax="self" collection="generics" optional="true" />
          <include syntax="self" collection="struct-definition-body" optional="true" />
        </subscopes>
      </scope>
      <!-- !Enum -->
      <scope name="rust.definition.enum">
        <symbol type="enum">
          <context behavior="subtree" group-by-name="true" />
        </symbol>
        <starts-with>
          <expression>\b(pub)?\s*(enum)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*</expression>
          <capture number="1" name="rust.keyword.modifier.visibility" />
          <capture number="2" name="rust.keyword.construct.enum" />
          <capture number="3" name="rust.identifier.type.enum.name" />
        </starts-with>
        <ends-with />
        <subscopes anchored="true">
          <scope name="rust.definition.enum.block">
            <starts-with>
              <expression>\{</expression>
              <capture number="0" name="rust.bracket" />
            </starts-with>
            <ends-with>
              <expression>\}</expression>
              <capture number="0" name="rust.bracket" />
            </ends-with>
            <subscopes>
              <include syntax="self" collection="comments" />
              <include syntax="self" collection="attributes" />
              <scope name="rust.definition.enum.member">
                <symbol type="enum-member" />
                <starts-with>
                  <expression>\b([a-zA-Z_][a-zA-Z0-9_]*)</expression>
                  <capture number="1" name="rust.identifier.enum.member.name" />
                </starts-with>
                <ends-with>
                  <expression>(?&lt;=,|\})</expression>
                </ends-with>
                <subscopes>
                  <include syntax="self" collection="struct-definition-body" />
                  <scope name="rust.definition.enum.member.type">
                    <starts-with>
                      <expression>\(</expression>
                    </starts-with>
                    <ends-with>
                      <expression>\)</expression>
                    </ends-with>
                    <subscopes>
                      <include syntax="self" collection="types" />
                    </subscopes>
                    </scope>
                    <scope name="rust.definition.enum.member.value">
                      <starts-with>
                        <expression>=</expression>
                        <capture number="0" name="rust.operator" />
                      </starts-with>
                      <ends-with>
                        <expression>(?&lt;=,|\})</expression>
                      </ends-with>
                      <subscopes>
                        <include syntax="self" collection="values" />
                      </subscopes>
                    </scope>
                  </subscopes>
                </scope>
            </subscopes>
          </scope>
        </subscopes>
      </scope>
      <!-- !Functions -->
      <scope name="rust.definition.function">
        <symbol type="function">
          <context behavior="subtree" foldable="false" />
        </symbol>
        <starts-with>
          <expression>\b(?:(pub)\s+)?(?:(const)\s+)?(fn)\s+([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
          <capture number="1" name="rust.keyword.modifier.visibility" />
          <capture number="2" name="rust.keyword.modifier.mutability" />
          <capture number="3" name="rust.keyword.construct.function" />
          <capture number="4" name="rust.identifier.function.name" />
        </starts-with>
        <ends-with />
        <subscopes anchored="true">
          <include syntax="self" collection="generics" optional="true" />
          <include syntax="self" collection="arguments" />
          <include syntax="self" collection="return-types" optional="true" />
          <include syntax="self" collection="function-blocks" />
        </subscopes>
      </scope>
      <!-- !Trait Method Implementations -->
      <scope name="rust.definition.implementation.protocol">
        <symbol type="category">
          <context behavior="subtree" />
          <display-name>
            <component selector="identifier.type.struct" />
            <component selector="identifier.type.protocol.name" prepend=" - implement " />
          </display-name>
        </symbol>
        <starts-with>
          <expression>\b(impl)\b(?=[^\{]*\bfor\b)</expression>
          <capture number="1" name="rust.keyword.construct" />
        </starts-with>
        <ends-with />
        <subscopes anchored="true">
          <include syntax="self" collection="generics" optional="true" />
          <scope name="rust.identifier.type.protocol">
            <expression>\b([a-zA-Z_][a-zA-Z0-9_]*(::))*([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
            <capture number="1" name="rust.identifier.path" />
            <capture number="2" name="rust.operator.path" />
            <capture number="3" name="rust.identifier.type.protocol.name" />
          </scope>
          <include syntax="self" collection="generics" optional="true" />
          <scope name="rust.keyword.modifier">
            <expression>\b(for)\b</expression>
            <capture number="1" name="rust.keyword.modifier" />
          </scope>
          <scope name="rust.identifier.type.struct">
            <expression>\b([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
            <capture number="1" name="rust.identifier.type.struct" />
          </scope>
          <include syntax="self" collection="generics" optional="true" />
          <scope name="rust.block.implementation">
            <starts-with>
              <expression>\{</expression>
              <capture number="0" name="rust.bracket" />
            </starts-with>
            <ends-with>
              <expression>\}</expression>
              <capture number="0" name="rust.bracket" />
            </ends-with>
            <subscopes>
              <include syntax="self" collection="method-definition" />
            </subscopes>
          </scope>
        </subscopes>
      </scope>
      <!-- !Methods -->
      <scope name="rust.definition.implementation">
        <symbol type="category">
          <context behavior="subtree" />
          <display-name>
            <component variable="name" append=" Methods" />
          </display-name>
        </symbol>
        <starts-with>
          <expression>\b(impl)\b(?![^\{]*\bfor\b)</expression>
          <capture number="1" name="rust.keyword.construct" />
        </starts-with>
        <ends-with />
        <subscopes anchored="true">
          <include syntax="self" collection="generics" optional="true" />
          <scope name="rust.identifier.type.struct">
            <expression>\b([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
            <capture number="1" name="rust.identifier.type.struct.name" />
          </scope>
          <include syntax="self" collection="generics" optional="true" />
          <scope name="rust.block.implementation">
            <starts-with>
              <expression>\{</expression>
              <capture number="0" name="rust.bracket" />
            </starts-with>
            <ends-with>
              <expression>\}</expression>
              <capture number="0" name="rust.bracket" />
            </ends-with>
            <subscopes>
              <include syntax="self" collection="comments" />
              <include syntax="self" collection="method-definition" />
            </subscopes>
          </scope>
        </subscopes>
      </scope>
      
      <!-- !Traits -->
      <scope name="rust.definition.protocol">
        <symbol type="interface">
          <context behavior="subtree" foldable="false" />
        </symbol>
        <starts-with>
          <expression>\b(?:(pub)\s+)?(trait)\s+([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
          <capture number="1" name="rust.keyword.modifier.visibility" />
          <capture number="2" name="rust.keyword.construct.protocol" />
          <capture number="3" name="rust.identifier.type.protocol.name" />
        </starts-with>
        <ends-with />
        <subscopes anchored="true">
          <scope name="rust.block.trait">
            <starts-with>
              <expression>\{</expression>
            </starts-with>
            <ends-with>
              <expression>\}</expression>
            </ends-with>
            <subscopes>
              <include syntax="self" collection="method-definition" />
            </subscopes>
          </scope>
        </subscopes>
      </scope>
    </collection>
    
    <collection name="method-definition">
      <scope name="rust.definition.method">
        <symbol type="method">
          <context behavior="subtree" foldable="false" />
        </symbol>
        <starts-with>
          <expression>\b(?:(pub)\s+)?(?:(async)\s+)?(?:(const)\s+)?(fn)\s+([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
          <capture number="1" name="rust.keyword.modifier.visibility" />
          <capture number="2" name="rust.keyword.modifier.concurrency" />
          <capture number="3" name="rust.keyword.modifier.mutability" />
          <capture number="4" name="rust.keyword.construct" />
          <capture number="5" name="rust.identifier.method.name" />
        </starts-with>
        <ends-with />
        <subscopes anchored="true">
          <include syntax="self" collection="generics" optional="true" />
          <include syntax="self" collection="arguments" />
          <include syntax="self" collection="return-types" optional="true" />
          <include syntax="self" collection="function-blocks" />
        </subscopes>
      </scope>
    </collection>
    
    <collection name="struct-definition-body">
      <scope name="rust.definition.struct.block">
        <starts-with>
          <expression>\{</expression>
          <capture number="0" name="rust.bracket" />
        </starts-with>
        <ends-with>
          <expression>\}</expression>
          <capture number="0" name="rust.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="comments" />
          <include syntax="self" collection="attributes" />
          <scope name="rust.definition.property.struct">
            <symbol type="property" />
            <starts-with>
              <expression>\b(?:(pub)\s+)?([a-zA-Z_][a-zA-Z0-9_]*)(:)</expression>
              <capture number="1" name="rust.keyword.modifier.visibility" />
              <capture number="2" name="rust.identifier.property.name" />
              <capture number="3" name="rust.punctuation" />
            </starts-with>
            <ends-with>
              <expression>(?&lt;=,|\})|(?=[\w\n\s]\})</expression>
            </ends-with>
            <subscopes>
              <include syntax="self" collection="generics" />
              <include syntax="self" collection="qualified-types" />
              <include syntax="self" collection="types" />
            </subscopes>
          </scope>
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Function Blocks -->
    <collection name="function-blocks">
      <scope name="rust.block">
        <symbol type="block">
          <context behavior="subtree" fold-type="function" />
        </symbol>
        <starts-with>
          <expression>\{</expression>
          <capture number="0" name="rust.bracket" />
        </starts-with>
        <ends-with>
          <expression>\}</expression>
          <capture number="0" name="rust.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" />
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Generics -->
    <collection name="generics">
      <scope name="rust.generic.type">
        <starts-with>
          <expression>&lt;</expression>
          <capture number="0" name="rust.bracket.generic" />
        </starts-with>
        <ends-with>
          <expression>&gt;</expression>
          <capture number="0" name="rust.bracket.generic" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="generics" />
          <include syntax="self" collection="keywords" />
          <include syntax="self" collection="lifetimes" />
          <include syntax="self" collection="qualified-types" />
          <include syntax="self" collection="types" />
          <scope name="rust.punctuation.separator">
            <expression>,</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Identifiers -->
    <collection name="identifiers">
      <scope name="rust.identifier.core.type.primitive">
        <strings>
          <string>bool</string>
          <string>char</string>
          <string>f32</string>
          <string>f64</string>
          <string>i8</string>
          <string>i16</string>
          <string>i32</string>
          <string>i64</string>
          <string>i128</string>
          <string>isize</string>
          <string>str</string>
          <string>u8</string>
          <string>u16</string>
          <string>u32</string>
          <string>u64</string>
          <string>u128</string>
          <string>usize</string>
        </strings>
      </scope>
      <scope name="rust.identifier.core.type.enum">
        <strings>
          <string>Option</string>
          <string>Some</string>
          <string>None</string>
          <string>Result</string>
          <string>Ok</string>
          <string>Err</string>
        </strings>
      </scope>
      <scope name="rust.identifier.core.type.struct">
        <strings>
          <string>Box</string>
          <string>Path</string>
          <string>PathBuf</string>
          <string>String</string>
          <string>Vec</string>
        </strings>
      </scope>
      <scope name="rust.identifier.property">
        <expression>(?&lt;=\.)([a-zA-Z_\$][A-Za-z0-9_]*)\b(?!\()</expression>
      </scope>
      <scope name="rust.identifier.property.static">
        <expression>(?&lt;=\:\:)([a-zA-Z_\$][A-Za-z0-9_]*)\b(?![!\(])</expression>
      </scope>
      <scope name="rust.identifier.method">
        <expression>(?&lt;=\.)([a-zA-Z_\$][A-Za-z0-9_]*)(?=\()</expression>
      </scope>
      <scope name="rust.identifier.method.static">
        <expression>(?&lt;=\:\:)([a-zA-Z_\$][A-Za-z0-9_]*)(?=\()</expression>
      </scope>
      <scope name="rust.identifier.function">
        <expression>(?&lt;!\.)((?:\b[a-zA-Z_]|\$)[A-Za-z0-9_]*)(?=\()</expression>
      </scope>
      <!-- Calling a macro markup is silly, but does make it stand out. -->
      <scope name="rust.identifier.global.function.markup.bold.macro">
        <expression>(?&lt;!\.)\b[a-zA-Z_][A-Za-z0-9_]*\!(?=\()</expression>
      </scope>
    </collection>
    
    <!-- !Imports -->
    <collection name="imports">
      <scope name="rust.import">
        <starts-with>
          <expression>\b(?:(pub)\s+)?(use)\b</expression>
          <capture number="1" name="rust.keyword.modifier.visibility" />
          <capture number="2" name="rust.keyword.statement.import" />
        </starts-with>
        <ends-with>
          <expression>\;</expression>
          <capture number="0" name="rust.punctuation.semicolon" />
        </ends-with>
        <subscopes>
          <scope name="rust.import.destructured">
            <starts-with>
              <expression>\{</expression>
              <capture number="0" name="rust.bracket" />
            </starts-with>
            <ends-with>
              <expression>\}</expression>
              <capture number="0" name="rust.bracket" />
            </ends-with>
            <subscopes>
              <scope name="rust.import.item">
                <expression>\b([a-zA-Z_][a-zA-Z0-9_]*)(?:\s+(as)\s+([a-zA-Z_][a-zA-Z0-9_]*))?\,?\b</expression>
                <capture number="1" name="rust.identifier" />
                <capture number="2" name="rust.keyword.modifier" />
                <capture number="3" name="rust.identifier" />
              </scope>
            </subscopes>
          </scope>
          <scope name="rust.import.single">
            <expression>\b([a-zA-Z_][a-zA-Z0-9_]*)(::)?</expression>
            <capture number="1" name="rust.identifier" />
            <capture number="2" name="rust.operator" />
          </scope>
        </subscopes>
      </scope>
      <scope name="rust.import.module">
        <expression>\b(?:(pub)\s+)?(mod)\s+([a-zA-Z_][a-zA-Z0-9_]*)\;</expression>
        <capture number="1" name="rust.keyword.modifier.visibility" />
        <capture number="2" name="rust.keyword.statement.module" />
        <capture number="3" name="rust.identifier" />
      </scope>
    </collection>
    
    <!-- !Keywords -->
    <collection name="keywords">
      <scope name="rust.keyword.condition">
        <strings>
          <string>break</string>
          <string>continue</string>
          <string>else</string>
          <string>for</string>
          <string>if</string>
          <string>loop</string>
          <string>match</string>
          <string>while</string>
        </strings>
      </scope>
      <scope name="rust.keyword.construct">
        <strings>
          <string>const</string>
          <string>enum</string>
          <string>fn</string>
          <string>impl</string>
          <string>let</string>
          <string>mod</string>
          <string>struct</string>
          <string>trait</string>
          <string>type</string>
          <string>union</string>
        </strings>
      </scope>
      <scope name="rust.keyword.modifier">
        <strings>
          <string>as</string>
          <string>async</string>
          <string>await</string>
          <string>crate</string>
          <string>dyn</string>
          <string>extern</string>
          <string>in</string>
          <string>mut</string>
          <string>pub</string>
          <string>ref</string>
          <string>return</string>
          <string>static</string>
          <string>&apos;static</string>
          <string>unsafe</string>
          <string>use</string>
          <string>where</string>
        </strings>
      </scope>
      <scope name="rust.keyword.reserved">
        <strings>
          <string>abstract</string>
          <string>become</string>
          <string>box</string>
          <string>do</string>
          <string>final</string>
          <string>macro</string>
          <string>override</string>
          <string>priv</string>
          <string>try</string>
          <string>typeof</string>
          <string>unsized</string>
          <string>virtual</string>
          <string>yield</string>
        </strings>
      </scope>
      <scope name="rust.keyword.self">
        <strings>
          <string>self</string>
          <string>Self</string>
          <string>super</string>
        </strings>
      </scope>
    </collection>
    
    <!-- !Lifetimes -->
    <collection name="lifetimes">
      <scope name="rust.decorator.lifetime">
        <expression>&apos;[a-zA-Z_][a-zA-Z0-9_]*</expression>
        <capture number="0" name="rust.identifier.decorator.lifetime.name" />
      </scope>
    </collection>
    
    <!-- !Qualified Types -->
    <collection name="qualified-types">
      <scope name="rust.type.qualified">
        <starts-with>
          <expression>&amp;|\*</expression>
          <capture number="0" name="rust.operator.pointer" />
        </starts-with>
        <ends-with>
          <expression>(?=\,|\)|\}|\;)</expression>
        </ends-with>
        <subscopes anchored="true">
          <include syntax="self" collection="lifetimes" optional="true" />
          <scope name="rust.keyword.modifier" optional="true">
            <strings>
              <string>const</string>
              <string>mut</string>
            </strings>
          </scope>
          <include syntax="self" collection="types" />
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Return Types -->
    <collection name="return-types">
      <scope name="rust.return-type" optional="true">
        <starts-with>
          <expression>(\-&gt;)\s*(\()?</expression>
          <capture number="1" name="rust.operator.return" />
          <capture number="2" name="rust.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))|(?=\{|\,(?![\w\,\s]*&gt;{1}?)|\;(?![\w\d\s]*\]{1}?))|$</expression>
          <capture number="1" name="rust.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="keywords" />
          <include syntax="self" collection="qualified-types" />
          <include syntax="self" collection="types" />
          <include syntax="self" collection="generics" />
        </subscopes>
      </scope>
    </collection>
    
    <!-- !Types -->
    <collection name="types">
      <scope name="rust.identifier.type">
        <expression>(\[)?([a-zA-Z_][a-zA-Z0-9_]*)(?:(\;)\s*(\d))?(\])?</expression>
        <capture number="1" name="rust.array.bracket" />
        <capture number="3" name="rust.operator.array.semicolon" />
        <capture number="4" name="rust.array.value.number" />
        <capture number="5" name="rust.array.bracket" />
      </scope>
      <scope name="rust.type.empty">
        <expression>\(\)</expression>
      </scope>
    </collection>
    
    <!-- !Values -->
    <collection name="values">
      <!-- Strings -->
      <scope name="rust.string">
        <starts-with>
          <expression>&quot;</expression>
        </starts-with>
        <ends-with>
          <expression>(?&lt;!\\)&quot;</expression>
        </ends-with>
        <subscopes>
          <scope name="rust.string.escape">
            <expression>\\[\\&quot;nrt]</expression>
          </scope>
          <scope name="rust.string-template">
            <starts-with>
            <expression>(?&lt;!{){(?!{)</expression>
            </starts-with>
            <ends-with>
              <expression>(?&lt;!})}(?!})</expression>
            </ends-with>
            <subscopes>
              <scope name="rust.string-template.value">
                <expression>[a-zA-Z_][a-zA-Z0-9_]*</expression>
              </scope>
            </subscopes>
          </scope>
        </subscopes>
      </scope>
      <scope name="rust.string.raw">
        <starts-with>
          <expression>\br&quot;</expression>
        </starts-with>
        <ends-with>
          <expression>&quot;</expression>
        </ends-with>
      </scope>
      <scope name="rust.string.raw.quote">
        <starts-with>
          <expression>\br\#+&quot;</expression>
        </starts-with>
        <ends-with>
          <expression>&quot;\#+</expression>
        </ends-with>
      </scope>
      <scope name="rust.string.byte">
        <starts-with>
          <expression>\bb&quot;</expression>
        </starts-with>
        <ends-with>
          <expression>&quot;</expression>
        </ends-with>
      </scope>
      <scope name="rust.string.char">
        <expression>&apos;(.)&apos;</expression>
        <capture number="1" name="rust.value.char" />
      </scope>
      <!-- Booleans -->
      <scope name="rust.value.boolean">
        <strings>
          <string>true</string>
          <string>false</string>
        </strings>
      </scope>
      <!-- Numbers -->
      <scope name="rust.value.number.float">
        <expression>\b-?[0-9]+(?:\.[0-9]+)?(?:f32|f64)?\b</expression>
      </scope>
      <scope name="rust.value.number.integer">
          <expression>\b-?[0-9][0-9_]*(?:[iu](?:8|16|32|64|128|size))?\b</expression>
      </scope>
      <scope name="rust.value.number.hexadecimal">
        <expression>\b0[xX][a-fA-F0-9][a-fA-F0-9_]*\b</expression>
      </scope>
      <scope name="rust.value.number.octal">
        <expression>\b0[0-7]+\b</expression>
      </scope>
    </collection>
    
    <!-- !Syntax -->
    <collection name="syntax">
      <!-- https://doc.rust-lang.org/book/appendix-02-operators.html -->
      <scope name="rust.operator">
        <expression>(\+|\-|\*|/|%|\=|\=\=|!\=|\+\=|\-\=|\*\=|/\=|%\=|\&lt;|\&gt;|\&lt;\=|\&gt;=|&amp;&amp;|\||\|\=|\|\||!|\^|\^\=|&amp;|&amp;\=|\&lt;\&lt;|\&lt;\&lt;\=|\&gt;\&gt;|\&gt;\&gt;\=|\-\&gt;|\=\&gt;|\.\.|\.\.\=|\?|\@)</expression>
      </scope>
      <scope name="rust.dot">
        <expression>\.</expression>
      </scope>
      <scope name="rust.bracket">
        <expression>[\(\[\)\]]</expression>
      </scope>
      <scope name="rust.comma">
        <expression>,</expression>
      </scope>
      <scope name="rust.semicolon">
        <expression>;</expression>
      </scope>
  </collection>
  </collections>
</syntax>
